AC_INIT(zxid.cmod)

AC_MODULE_INIT()
AC_CONFIG_HEADER(zxid_config.h)

PIKE_FEATURE_NODEP(ZXID)

AC_ARG_WITH(zxid-prefix,[  --with-zxid-prefix=PFX   Prefix where ZXID is installed (optional)],
            zxid_prefix="$withval", zxid_prefix="")

if test x$zxid_prefix != x ; then
    # FIXME: Add include and lib paths here.
    :
fi

ORIG_LIBS="$LIBS"

AC_CHECK_LIB(z, deflate,, [
  AC_CHECK_LIB(gz, deflate,, [
    AC_CHECK_LIB(zlib, deflate)
  ])
])
AC_CHECK_LIB(crypto, SHA1)
AC_CHECK_LIB(ssl, EVP_CIPHER_block_size)
AC_CHECK_LIB(curl, curl_easy_reset)
AC_CHECK_LIB(zxid, zxid_simple)
AC_CHECK_HEADERS(zx/zx.h zxid/zxid.h)

if test x"$ac_cv_lib_zxid_zxid_simple:$ac_cv_header_zxid_zxid_h" = "xyes:yes";
then
    PIKE_FEATURE_OK(ZXID)
    AC_DEFINE(HAVE_ZXID)

    AC_MSG_CHECKING(if struct zxid_conf has a burl member)
    AC_CACHE_VAL(pike_cv_struct_zxid_conf_burl, [
	AC_TRY_COMPILE([
#include <zx/zx.h>
#include <zxid/zxid.h>
	], [
	    struct zxid_conf conf;
	    conf.burl = "BURL";
	], [
	    pike_cv_struct_zxid_conf_burl="yes"
	], [
	    pike_cv_struct_zxid_conf_burl="no"
	])
    ])
    if test "x$pike_cv_struct_zxid_conf_burl" = "xyes"; then
	# ZXID 1.19:2013-12-04 or later.
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_STRUCT_ZXID_CONF_BURL)
    else
	AC_MSG_RESULT(no)
    fi

    AC_MSG_CHECKING(if struct zxid_cgi has an uri_path member)
    AC_CACHE_VAL(pike_cv_struct_zxid_cgi_uri_path, [
	AC_TRY_COMPILE([
#include <zx/zx.h>
#include <zxid/zxid.h>
	], [
	    struct zxid_cgi cgi;
	    cgi.uri_path = "URI_PATH";
	], [
	    pike_cv_struct_zxid_cgi_uri_path="yes"
	], [
	    pike_cv_struct_zxid_cgit_uri_path="no"
	])
    ])
    if test "x$pike_cv_struct_zxid_cgi_uri_path" = "xyes"; then
	# ZXID 1.18:2013-11-17 or later.
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_STRUCT_ZXID_CGI_URI_PATH)
    else
	AC_MSG_RESULT(no)
    fi
else
    LIBS="$ORIG_LIBS"
fi

AC_OUTPUT(Makefile,echo FOO >stamp-h )
