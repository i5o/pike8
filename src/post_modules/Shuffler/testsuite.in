START_MARKER
dnl tests for Shuffler module

cond_begin([[ Shuffler.Shuffle ]])

test_any([[
    Stdio.File f = Stdio.File()->pipe();
    Shuffler.Shuffle sf = Shuffler.Shuffler()->shuffle( f );
    sf->set_done_callback( lambda() { sf->stop(); } );
    sf->start();

    Pike.DefaultBackend( 1.0 );
    return "nosegfault";
]],"nosegfault")

test_any([[
    Stdio.File f = Stdio.File()->pipe();
    Shuffler.Shuffle sf = Shuffler.Shuffler()->shuffle( f );
    sf->start();

    Pike.DefaultBackend( 1.0 );
    return "nosegfault";
]],"nosegfault")

cond([[master()->resolv("Pike.PollDeviceBackend")]], [[
  test_any([[
    Pike.PollDeviceBackend pb = Pike.PollDeviceBackend();
    Stdio.File f = Stdio.File(), f2 = f->pipe();
    Shuffler.Shuffler sfr = Shuffler.Shuffler();
    sfr->set_backend (pb);
    Shuffler.Shuffle sf = sfr->shuffle(f);
    sf->add_source("xyz\n" * 100000);
    sf->set_done_callback( lambda() { sf->stop(); destruct(sf); });
    sf->start();
    string res = "";
    f2->set_backend(pb);
    f2->set_read_callback( lambda(mixed id, string s) { res += s; });
    while (sf) {
      pb(1.0);
    }
    f->close();
    return res + f2->read();
  ]], "xyz\n" * 100000)
]])

cond([[master()->resolv("Pike.PollBackend")]], [[
  test_any([[
    Pike.PollBackend pb = Pike.PollBackend();
    Stdio.File f = Stdio.File(), f2 = f->pipe();
    Shuffler.Shuffler sfr = Shuffler.Shuffler();
    sfr->set_backend (pb);
    Shuffler.Shuffle sf = sfr->shuffle(f);
    sf->add_source("xyz\n" * 100000);
    sf->set_done_callback( lambda() { sf->stop(); destruct(sf); });
    sf->start();
    string res = "";
    f2->set_backend(pb);
    f2->set_read_callback( lambda(mixed id, string s) { res += s; });
    while (sf) {
      pb(1.0);
    }
    f->close();
    return res + f2->read();
  ]], "xyz\n" * 100000)
]])

cond([[master()->resolv("Pike.SelectBackend")]], [[
  test_any([[
    Pike.SelectBackend pb = Pike.SelectBackend();
    Stdio.File f = Stdio.File(), f2 = f->pipe();
    Shuffler.Shuffler sfr = Shuffler.Shuffler();
    sfr->set_backend (pb);
    Shuffler.Shuffle sf = sfr->shuffle(f);
    sf->add_source("xyz\n" * 100000);
    sf->set_done_callback( lambda() { sf->stop(); destruct(sf); });
    sf->start();
    string res = "";
    f2->set_backend(pb);
    f2->set_read_callback( lambda(mixed id, string s) { res += s; });
    while (sf) {
      pb(1.0);
    }
    f->close();
    return res + f2->read();
  ]], "xyz\n" * 100000)
]])

cond_end // Shuffler.Shuffle

END_MARKER
