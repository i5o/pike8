/* -*- C -*- */
class GTK1.Notebook;
inherit GTK1.Container;
//! The NoteBook Widget is a collection of 'pages' that overlap each
//! other, each page contains different information. This widget has
//! become more common lately in GUI programming, and it is a good way
//! to show blocks similar information that warrant separation in their
//! display.
//!
//! IMG: GTK1.Notebook( )->set_tab_pos( GTK1.POS_LEFT )->append_page( GTK1.Label("Page 1\nContents"), GTK1.Label("Page 1"))->append_page( GTK1.Label(""), GTK1.Label("Page 2"))->append_page(GTK1.Label("Page 3 contents\nare here!"), GTK1.Label("Page 3"))
//! IMG: GTK1.Notebook( )->set_tab_pos( GTK1.POS_TOP )->append_page( GTK1.Label("Page 1\nContents"), GTK1.Label("Page 1"))->append_page( GTK1.Label(""), GTK1.Label("Page 2"))->append_page(GTK1.Label("Page 3 contents\nare here!"), GTK1.Label("Page 3"))
//! IMG: GTK1.Notebook( )->set_tab_pos( GTK1.POS_RIGHT )->append_page( GTK1.Label("Page 1\nContents"), GTK1.Label("Page 1"))->append_page( GTK1.Label(""), GTK1.Label("Page 2"))->append_page(GTK1.Label("Page 3 contents\nare here!"), GTK1.Label("Page 3"))->next_page()->next_page()
signal switch_page;
//! Called when a different page is selected
void create();
void append_page( GTK1.Widget contents, GTK1.Widget label );
//! Add a new 'page' to the notebook. The first argument is the contents of
//! the page, the second argument is the label.
void append_page_menu( GTK1.Widget contents,
                       GTK1.Widget label,
                       GTK1.Menu(GTK1.Widget) menu );
//! Add a new 'page' to the notebook. The first argument is the
//! contents of the page, the second argument is the label, the third
//! argument is a menu widget.
void prepend_page( GTK1.Widget contents, GTK1.Widget label );
//! Add a page at the end of the list of pages. The first argument is
//! the contents of the page, the second argument is the label.
void prepend_page_menu( GTK1.Widget contents, GTK1.Widget label,
                        GTK1.Menu(GTK1.Widget) menu );
//! Add a new 'page' at the end of the list of pages. The first
//! argument is the contents of the page, the second argument is the
//! label, the third argument is a menu widget.
void insert_page( GTK1.Widget contents, GTK1.Widget label, int pos );
//! Insert a page at the specified location, arguments as for
//! append_page, but an aditional integer specifies the location.
void insert_page_menu( GTK1.Widget contents, GTK1.Widget label,
                       GTK1.Menu(GTK1.Widget) menu, int pos );
//! Insert a page at the specified location, arguments as for
//! append_page_menu, but an aditional integer specifies the location.
void remove_page( int pos );
//! Remove a page.
int get_current_page();
//!  Returns the index of the currently selected page
GTK1.Widget get_nth_page( int index );
//!  Returns the page for the specified index
int page_num( GTK1.Widget widget );
//!  Returns the index for the specified page
void set_page( int pos );
//! Go to the specified page
void next_page();
//! Go to the next page
void prev_page();
//! Go to the previous page
void set_tab_pos( int pos );
//! One of CONST(GTK_POS)
void set_show_tabs( int showtabsp );
//! If supplied with a true value, the tabs will be shown. Otherwise
//! they will not be shown. The user will not be able to select the
//! pages without them, but you can add 'next' and 'previous' buttons
//! to create a wizard-line interface.
void set_homogeneous_tabs( int homogeneousp );
//! If true, all tabs will have the same size
void set_show_border( int showborderp );
//! If true, show the borders around the contents and tabs.
void set_scrollable( int scrollablep );
//! If true, add scrollbars if nessesary.
void set_tab_border( int border_width );
//! In pixels.
void set_tab_hborder( int border_width );
//! In pixels.
void set_tab_vborder( int border_width );
//! In pixels.
void popup_enable();
//! Enable the popup menu (set with insert_page_menu)
void popup_disable();
//! Disable the popup menu (set with insert_page_menu)
GTK1.Widget get_tab_label( GTK1.Widget page );
void set_tab_label( GTK1.Widget page, GTK1.Widget label );
void set_tab_label_text( GTK1.Widget page, string title );
GTK1.Widget get_menu_label( GTK1.Widget page );
void set_menu_label( GTK1.Widget page, GTK1.Widget label );
void set_menu_label_text( GTK1.Widget page, string label );
void set_tab_label_packing( GTK1.Widget child, int expand, int fill, int type );

mapping(string:int) query_tab_label_packing( GTK1.Widget page )
//! Returns ([ "expand":expandp, "fill":fillp, "pack_type":type ])
{
  struct object *o;
  gboolean expand=0, fill=0;
  GtkPackType pack_type=0;
  get_all_args( "query_tab_label_packing", args, "%o", &o );
  gtk_notebook_query_tab_label_packing( GTK_NOTEBOOK( THIS->obj ),
                                        GTK_WIDGET( get_gtkobject( o ) ),
                                        &expand,
                                        &fill,
                                        &pack_type );
  my_pop_n_elems(args);
  push_text( "expand" );
  push_int( expand );
  push_text( "fill" );
  push_int( fill );
  push_text( "pack_type" );
  push_int( pack_type );
  f_aggregate_mapping( 6 );
}

void reorder_child( GTK1.Widget page, int new_index );
//! Move the specified page to the index new_index


