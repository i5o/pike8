/* -*- C -*- */
class GDK1.Rectangle;
void create(int x, int y, int width, int height)
//! Create a new rectangle
//!
//! NOIMG
{
  GdkRectangle *r;
  INT_TYPE x, y, w, h;
  pgtk_verify_setup();
  pgtk_verify_not_inited();
  THIS->obj = (void *)(r=g_malloc(sizeof(GdkRectangle)));
  get_all_args( "create", args, "%i%i%i%i", &x, &y, &w, &h );
  r->x = x;
  r->y = y;
  r->width = w;
  r->height = h;
  RETURN_THIS();
}

void set(int x, int y, int width, int height )
//! Set the upper left corner and the size of the rectangle.
{
  GdkRectangle *r = (GdkRectangle *)THIS->obj;
  INT_TYPE x, y, w, h;
  get_all_args( "set", args, "%i%i%i%i", &x, &y, &w, &h );
  r->x = x;
  r->y = y;
  r->width = w;
  r->height = h;
  RETURN_THIS();
}

mixed cast(string type)
//! Normally used like (mapping)rectangle or (array)rectangle.
{
  struct pike_string *type;
  GdkRectangle *r = (GdkRectangle *)THIS->obj;

  if (args!=1)
    SIMPLE_TOO_FEW_ARGS_ERROR("cast",1);

  type = Pike_sp[-args].u.string;
  my_pop_n_elems(args);

  if(type == literal_mapping_string)
  {
    push_text( "x" );
    push_int( r->x );
    push_text( "y" );
    push_int( r->y );
    push_text( "width" );
    push_int( r->width );
    push_text( "height" );
    push_int( r->height );
    f_aggregate_mapping( 8 );
  } else if(type == literal_array_string) {
    push_int( r->x );
    push_int( r->y );
    push_int( r->width );
    push_int( r->height );
    f_aggregate( 4 );
  } else {
    push_undefined();
  }
}

void destroy()
{
  g_free(THIS->obj);
}

